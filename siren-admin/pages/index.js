import Head from 'next/head'
import BaseLayout from "../components/container/BaseLayout";
import firebaseApp from "../net/firebaseApp";
import {collection, doc, getFirestore, orderBy, onSnapshot, updateDoc, query, where} from "firebase/firestore";
import {Fragment, useEffect, useState} from "react";
import {Button, Select, Table} from "antd";
import {DateTime} from 'luxon';

const store = getFirestore(firebaseApp);
const orders = collection(store, 'orders');
const q = query( orders, orderBy( 'createdAt', 'desc' ) );
// const q = query( orders, where( 'status', '==', '픽업 완료'), orderBy( 'createdAt', 'desc' ) );

const formatter = Intl.NumberFormat('ko-kr');

function sum(array) {
    return array.reduce((acc, num) => {
        acc += num
        return acc
    }, 0);
}

export default function Home() {
    const [list, setList] = useState([]);
    useEffect(() => {
        return onSnapshot(q, docs => {
            const newList = [];
            docs.forEach(doc => newList.push(({id: doc.id, ...doc.data()})));
            setList(newList);
        })
    }, []);

    const columns = [
        {
            title: '이름',
            dataIndex: 'name',
            key: 'name',
        },
        {
            title: '주문 내역',
            dataIndex: 'items',
            key: 'items',
            render: (text, record) => {
                return <div>
                    <ul>
                        {record.items.map(item => (
                            <Fragment key={item.name}>
                                <li>{item.name} {formatter.format(item.price)}원 &times; {item.count}</li>
                            </Fragment>
                        ))}
                    </ul>
                </div>
            }
        },
        {
            title: '합계 금액',
            dataIndex: 'items',
            key: 'total',
            render: ( text, record ) => {
                return (
                    <div>
                        합계 : {formatter.format(sum(record.items.map(item => item.count * item.price)))}원
                    </div>
                )
            }
        },
        {
            title: '상태',
            dataIndex: 'status',
            key: 'status',
            render: (text, record) => {
                return <>
                    <Button
                        type={ text === '주문 완료' ? 'primary' : '' }
                        onClick={() => updateDoc( doc( store, 'orders', record.id ), { status: '주문 완료' } )}
                    >
                        주문 완료
                    </Button>
                    <Button
                        type={ text === '제조중' ? 'primary' : '' }
                        onClick={() => updateDoc( doc( store, 'orders', record.id ), { status: '제조중' } )}
                    >
                        제조중
                    </Button>
                    <Button
                        type={ text === '제조 완료' ? 'primary' : '' }
                        onClick={() => updateDoc( doc( store, 'orders', record.id ), { status: '제조 완료' } )}
                    >
                        제조 완료
                    </Button>
                    <Button
                        type={ text === '픽업 완료' ? 'primary' : '' }
                        onClick={() => updateDoc( doc( store, 'orders', record.id ), { status: '픽업 완료' } )}
                    >
                        픽업 완료
                    </Button>
                </>

                /*
                <Select value={text} onChange={value => {
                    updateDoc( doc( store, 'orders', record.id ), { status: value } );
                } }>
                    <Select.Option value="주문 완료">주문 완료</Select.Option>
                    <Select.Option value="제조중">제조중</Select.Option>
                    <Select.Option value="제조 완료">제조 완료</Select.Option>
                    <Select.Option value="픽업 완료">픽업 완료</Select.Option>
                </Select>
                 */
            }
        },
        {
            title: '주문 시각',
            dataIndex: 'createdAt',
            key: 'createdAt',
            render: (text, record) => {
                return DateTime.fromSeconds(record.createdAt.seconds).toFormat('LL-dd HH:mm');
            }
        },
    ];

    return (
        <BaseLayout>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <h1>주문 확인</h1>

            <Table dataSource={list} columns={columns} rowKey={'id'}/>
        </BaseLayout>
    )
}
